# Upstream backend server
upstream backend {
    server backend:3000;
    keepalive 32;
}

# HTTP server
server {
    listen 80;
    server_name maptag.bf www.maptag.bf localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # API endpoints
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log off;
    }

    # File uploads with special rate limiting
    location /api/addresses {
        limit_req zone=upload burst=5 nodelay;
        client_max_body_size 10M;
        
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        
        # Upload progress support
        proxy_request_buffering off;
    }

    # Serve uploaded files
    location /uploads/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_valid 200 1d;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # QR code short URLs
    location ~ ^/([A-Z0-9]{4})$ {
        return 301 /api/addresses/resolve/$1;
    }

    # Address code URLs
    location ~ ^/(BF-[A-Z]{3}-\d{4}-[A-Z0-9]{4})$ {
        return 301 /api/addresses/$1;
    }

    # Static files serving (if serving web frontend)
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
        
        # Browser caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Security: Deny access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }

    # Robots.txt
    location /robots.txt {
        return 200 "User-agent: *\nDisallow: /api/\nAllow: /\n";
        add_header Content-Type text/plain;
    }

    # Favicon fallback
    location /favicon.ico {
        return 204;
        access_log off;
        log_not_found off;
    }
}

# HTTPS server (uncomment when SSL certificates are available)
# server {
#     listen 443 ssl http2;
#     server_name maptag.bf www.maptag.bf;
#
#     ssl_certificate /etc/ssl/certs/maptag.bf.crt;
#     ssl_certificate_key /etc/ssl/private/maptag.bf.key;
#     ssl_session_cache shared:SSL:1m;
#     ssl_session_timeout 10m;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#
#     # Include the same location blocks as the HTTP server
#     include /etc/nginx/conf.d/locations.conf;
# }